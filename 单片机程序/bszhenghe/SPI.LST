C51 COMPILER V7.50   SPI                                                                   11/26/2017 18:06:50 PAGE 1   


C51 COMPILER V7.50, COMPILATION OF MODULE SPI
OBJECT MODULE PLACED IN SPI.OBJ
COMPILER INVOKED BY: E:\keil\C51\BIN\C51.EXE SPI.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          #include <reg52.h>
   2          #include <intrins.h>
   3          //
   4          typedef unsigned char  U8;       /* defined for unsigned 8-bits integer variable          无符号8位整型变量  */
   5          typedef signed   char  S8;       /* defined for signed 8-bits integer variable            有符号8位整型变量  */
   6          typedef unsigned int   U16;      /* defined for unsigned 16-bits integer variable         无符号16位整型变量 */
   7          typedef signed   int   S16;      /* defined for signed 16-bits integer variable           有符号16位整型变量 */
   8          typedef unsigned long  U32;      /* defined for unsigned 32-bits integer variable         无符号32位整型变量 */
   9          typedef signed   long  S32;      /* defined for signed 32-bits integer variable           有符号32位整型变量 */
  10          typedef float          F32;      /* single precision floating point variable (32bits) 单精度浮点数（32位长
             -度） */
  11          typedef double         F64;      /* double precision floating point variable (64bits) 双精度浮点数（64位长
             -度） */
  12          //
  13          /******************************************************************
  14          // nRF24L01寄存器地址
  15          *******************************************************************/
  16          #define CONFIG      0x00  // 配置寄存器
  17          #define EN_AA       0x01  // “自动应答”功能寄存
  18          #define EN_RX_ADDR  0x02  // 接收通道使能寄存器
  19          #define SETUP_AW    0x03  // 地址宽度设置寄存器
  20          #define SETUP_RETR  0x04  // 自动重发设置寄存器
  21          #define RF_CH       0x05  // 射频通道频率设置寄存器
  22          #define RF_SETUP    0x06  // 射频设置寄存器
  23          #define STATUS      0x07  // 状态寄存器
  24          #define OBSERVE_TX  0x08  // 发送检测寄存器
  25          #define CD          0x09  // 载波检测寄存器
  26          #define RX_ADDR_P0  0x0A  // 数据通道0接收地址寄存器
  27          #define RX_ADDR_P1  0x0B  // 数据通道1接收地址寄存器
  28          #define RX_ADDR_P2  0x0C  // 数据通道2接收地址寄存器
  29          #define RX_ADDR_P3  0x0D  // 数据通道3接收地址寄存器
  30          #define RX_ADDR_P4  0x0E  // 数据通道4接收地址寄存器
  31          #define RX_ADDR_P5  0x0F  // 数据通道5接收地址寄存器
  32          #define TX_ADDR     0x10  // 发送地址寄存器
  33          #define RX_PW_P0    0x11  // 数据通道0有效数据宽度设置寄存器
  34          #define RX_PW_P1    0x12  // 数据通道1有效数据宽度设置寄存器
  35          #define RX_PW_P2    0x13  // 数据通道2有效数据宽度设置寄存器
  36          #define RX_PW_P3    0x14  // 数据通道3有效数据宽度设置寄存器
  37          #define RX_PW_P4    0x15  // 数据通道4有效数据宽度设置寄存器
  38          #define RX_PW_P5    0x16  // 数据通道5有效数据宽度设置寄存器
  39          #define FIFO_STATUS 0x17  // FIFO状态寄存器
  40          //*********************************************************************************
  41          #define TX_ADDR_WITDH 5//发送地址宽度设置为5个字节
  42          #define RX_ADDR_WITDH 5//接收地址宽度设置为5个字节
  43          #define TX_DATA_WITDH 8//
  44          #define RX_DATA_WITDH 8
  45          /******************************************************************
  46          // nRF24L01指令格式：
  47          *******************************************************************/
  48          #define R_REGISTER    0x00  // 读寄存器
  49          #define W_REGISTER    0x20  // 写寄存器
  50          #define R_RX_PLOAD    0x61  // 读RX FIFO有效数据，1-32字节，当读数据完成后，数据被清除，应用于接收模式
  51          #define W_TX_PLOAD    0xA0  // 写TX FIFO有效数据，1-32字节，写操作从字节0开始，应用于发射模式
  52          #define FLUSH_TX    0xE1  // 清除TX FIFO寄存器，应用于发射模式
  53          #define FLUSH_RX    0xE2  // 清除RX FIFO寄存器，应用于接收模式
C51 COMPILER V7.50   SPI                                                                   11/26/2017 18:06:50 PAGE 2   

  54          #define REUSE_TX_PL 0xE3  // 重新使用上一包有效数据，当CE为高过程中，数据包被不断的重新发射
  55          #define NOP         0xFF  // 空操作，可以用来读状态寄存器
  56          U8 sta;    // 状态变量
  57          #define RX_DR  (sta & 0x40)  // 接收成功中断标志
  58          #define TX_DS  (sta & 0x20)  // 发射成功中断标志
  59          #define MAX_RT (sta & 0x10)  // 重发溢出中断标志
  60          U8 RX_Buffer[RX_DATA_WITDH];
  61          U8 TX_Buffer[TX_DATA_WITDH];
  62          U8 code TX_Addr[]={0x34,0x43,0x10,0x10,0x01};
  63          //U8 TX_Addr[]="Rec01";
  64          sbit CE =  P1^2;
  65          sbit CSN=  P1^3;
  66          sbit SCK=  P1^7;
  67          sbit MOSI= P1^5;
  68          sbit MISO= P1^6;
  69          sbit IRQ = P1^4;
  70          
  71          void _delay_us(U16 x)
  72          {
  73   1          U16 i,j;
  74   1          for (j=0;j<x;j++)
  75   1              for (i=0;i<12;i++);
  76   1      }
  77          void _delay_ms(U16 x)
  78          {
  79   1          U16 i,j;
  80   1          for (j=0;j<x;j++)
  81   1              for (i=0;i<120;i++);
  82   1      }
  83          void nRF24L01_Init(void)
  84          {
  85   1          CE=0;//待机模式Ⅰ
  86   1          CSN=1;
  87   1          SCK=0;
  88   1          IRQ=1;
  89   1      }
  90          /*SPI时序函数*/
  91          U8 SPI_RW(U8 byte)
  92          {
  93   1          U8 i;
  94   1          for(i=0;i<8;i++)//一字节8位循环8次写入
  95   1          {
  96   2              if(byte&0x80)//如果数据最高位是1
  97   2                  MOSI=1;//向NRF24L01写1
  98   2              else //否则写0
  99   2                  MOSI=0;
 100   2              byte<<=1;//低一位移到最高位
 101   2              SCK=1;//SCK拉高，写入一位数据，同时读取一位数据
 102   2              if(MISO)
 103   2                  byte|=0x01;
 104   2              SCK=0;//SCK拉低
 105   2          }
 106   1          return byte;//返回读取一字节 
 107   1      }
 108          /*SPI写寄存器一字节函数*/
 109          /*reg:寄存器地址*/
 110          /*value:一字节（值）*/
 111          U8 SPI_W_Reg(U8 reg,U8 value)
 112          {
 113   1          U8 status;//返回状态
 114   1          CSN=0;//SPI片选
 115   1          status=SPI_RW(reg);//写入寄存器地址，同时读取状态
C51 COMPILER V7.50   SPI                                                                   11/26/2017 18:06:50 PAGE 3   

 116   1          SPI_RW(value);//写入一字节
 117   1          CSN=1;//
 118   1          return status;//返回状态
 119   1      }
 120          /*SPI读一字节*/
 121          U8 SPI_R_byte(U8 reg)
 122          {
 123   1          U8 reg_value;
 124   1          CSN=0;//SPI片选
 125   1          SPI_RW(reg);//写入地址
 126   1          reg_value=SPI_RW(0);//读取寄存器的值
 127   1          CSN=1;
 128   1          return reg_value;//返回读取的值
 129   1      }
 130          /*SPI读取RXFIFO寄存器数据*/
 131          /*reg:寄存器地址*/
 132          /*Dat_Buffer:用来存读取的数据*/
 133          /*DLen:数据长度*/
 134          U8 SPI_R_DBuffer(U8 reg,U8 *Dat_Buffer,U8 Dlen)
 135          {
 136   1          U8 status,i;
 137   1          CSN=0;//SPI片选
 138   1          status=SPI_RW(reg);//写入寄存器地址，同时状态
 139   1          for(i=0;i<Dlen;i++)
 140   1          {
 141   2              Dat_Buffer[i]=SPI_RW(0);//存储数据
 142   2          }
 143   1          CSN=1;
 144   1          return status;
 145   1      }
 146          /*SPI向TXFIFO寄存器写入数据*/
 147          /*reg:写入寄存器地址*/
 148          /*TX_Dat_Buffer:存放需要发送的数据*/
 149          /*Dlen:数据长度*/  
 150          U8 SPI_W_DBuffer(U8 reg,U8 *TX_Dat_Buffer,U8 Dlen)
 151          {
 152   1          U8 status,i;
 153   1          CSN=0;//SPI片选，启动时序
 154   1          status=SPI_RW(reg);
 155   1          for(i=0;i<Dlen;i++)
 156   1          {
 157   2              SPI_RW(TX_Dat_Buffer[i]);//发送数据
 158   2          }
 159   1          CSN=1;
 160   1          return status;  
 161   1      }
 162          U8 SPI_Read_Buf(U8 reg,U8 *pBuf,U8 uchars)//读多个字节并读出此地址的状态
 163          {
 164   1              U8 status,i;
 165   1              CSN=0;
 166   1              status=SPI_RW(reg);
 167   1              for(i=0;i<uchars;i++)
 168   1              pBuf[i]=SPI_RW(0);
 169   1              CSN=1;
 170   1              return status;  
 171   1      }
 172          /*设置发送模式*/
 173          void nRF24L01_Set_TX_Mode(U8 *TX_Data)
 174          {
 175   1          CE=0;//待机（写寄存器之前一定要进入待机模式或掉电模式）
 176   1          SPI_W_DBuffer(W_REGISTER+TX_ADDR,TX_Addr,TX_ADDR_WITDH);/*写寄存器指令+接收节点地址+地址宽度*/
 177   1          SPI_W_DBuffer(W_REGISTER+RX_ADDR_P0,TX_Addr,TX_ADDR_WITDH);/*为了接收设备应答信号，接收通道0地址与发送
C51 COMPILER V7.50   SPI                                                                   11/26/2017 18:06:50 PAGE 4   

             -地址相同*/
 178   1          SPI_W_DBuffer(W_TX_PLOAD,TX_Data,TX_DATA_WITDH);/*写有效数据地址+有效数据+有效数据宽度*/
 179   1          SPI_W_Reg(W_REGISTER+EN_AA,0x00);/*接收通道0自动应答*/
 180   1          SPI_W_Reg(W_REGISTER+EN_RX_ADDR,0x01);/*使能接收通道0*/
 181   1          SPI_W_Reg(W_REGISTER+SETUP_RETR,0x00);/*自动重发延时250US+86US，重发10次*/
 182   1          SPI_W_Reg(W_REGISTER+RF_CH,40);/*(2400)MHZ射频通道*/
 183   1          SPI_W_Reg(W_REGISTER+RF_SETUP,0x07);/*1Mbps速率,发射功率:0DBM,低噪声放大器增益*/
 184   1          SPI_W_Reg(W_REGISTER+CONFIG,0x0e);/*发送模式,上电,16位CRC校验,CRC使能*/
 185   1          CE=1;//启动发射
 186   1          _delay_ms(5);/*CE高电平持续时间最少10US以上*/
 187   1      }
 188          void setRX_Mode()
 189          {
 190   1              CE=0;
 191   1              SPI_W_DBuffer(W_REGISTER + RX_ADDR_P0, TX_Addr,TX_ADDR_WITDH); // 写接收地址到0通道
 192   1              SPI_W_Reg(W_REGISTER + EN_AA, 0x00);      // Enable Auto.Ack:Pipe0
 193   1              SPI_W_Reg(W_REGISTER + EN_RX_ADDR, 0x01);  // Enable Pipe0
 194   1              SPI_W_Reg(W_REGISTER + RF_CH,40);        // Select 工作频段 channel 2.4G
 195   1              SPI_W_Reg(W_REGISTER + RX_PW_P0, RX_DATA_WITDH); // Select same RX payload width as TX Payload width
 196   1              SPI_W_Reg(W_REGISTER + RF_SETUP, 0x07);   // TX_PWR:0dBm, Datarate:2Mbps, LNA:HCURR
 197   1              SPI_W_Reg(W_REGISTER + CONFIG, 0x0f);     //IRQ中断响应16位CRC校验，接收模式
 198   1      
 199   1              CE = 1; // Set CE pin high to enable RX device
 200   1              _delay_us(35);
 201   1      } 
 202          U8 Check_Rec(void)
 203          {
 204   1          U8 status;
 205   1          sta=SPI_R_byte(R_REGISTER+STATUS);
 206   1          if(RX_DR)
 207   1          {
 208   2              CE=0;
 209   2              SPI_R_DBuffer(R_RX_PLOAD,RX_Buffer,RX_DATA_WITDH);
 210   2              status=1;
 211   2          }
 212   1          SPI_W_Reg(W_REGISTER+STATUS,0xff);
 213   1          return status;  
 214   1      }
 215          /*检测应答信号*/
 216          U8 Check_Ack(void)
 217          {
 218   1          sta=SPI_R_byte(R_REGISTER+STATUS);/*读取寄存状态*/
 219   1          if(TX_DS||MAX_RT)/*如果TX_DS或MAX_RT为1,则清除中断和清除TX_FIFO寄存器的值*/
 220   1          {   
 221   2                      
 222   2              SPI_W_Reg(W_REGISTER+STATUS,0xff);
 223   2              CSN=0;
 224   2              SPI_RW(FLUSH_TX);/*如果没有这一句只能发一次数据，大家要注意*/
 225   2              CSN=1;
 226   2              return 0;
 227   2          }
 228   1          else
 229   1              return 1;
 230   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    500    ----
   CONSTANT SIZE    =      5    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     17      19
C51 COMPILER V7.50   SPI                                                                   11/26/2017 18:06:50 PAGE 5   

   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
